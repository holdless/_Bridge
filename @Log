----------
602.5.0108
----------
<Python: get string representation of PyObject? (if the obj format in C is unknown..):>
PyObject* objectsRepresentation = PyObject_Repr(yourObject);
const char* s = PyString_AsString(objectsRepresentation);

<refcnt not properly decrease: new ref. by "PyString_FromString" after "PyObject_CallObject":>
this confuses me all day long....
the actual solution is to declare "sentence" correctly. for example:
const char* sentence = "i am jack"; <-- correct!
const char sentence[] = "i am jack"; <-- wrong! it's not equal though i don't know why..
pSentence = PyString_FromString(sentence)
Py_DECREF(pSentence);

----------
602.4.0107
----------
<Python/C API: "PyInt_FromLong" add reference count oddly:>
https://docs.python.org/2/c-api/int.html
" PyObject* PyInt_FromLong(long ival)
  Return value: New reference.
  Create a new integer object with a value of ival.

  The current implementation keeps an array of integer objects for all integers between -5 and 256, 
  when you create an int in that range you actually just get back a reference to the existing object. 
  So it should be possible to change the value of 1. I suspect the behaviour of Python in this case is undefined. :-) "

#remark[1]: according to above weird property, when I use "PyObject_CallObject" to call a python script function, if the
function return the int value in a range from -5 to 256, then I got a unexpectable refcnt. further more, if the return
object type is "unknown" (here I mean the object type is not define or never heard in C), then I got a unexpectable refcnt too.
this really bothers me so much! gosh-darn...

#remakr[2]: after long time trial & error, I got some not-so-sure conclusion about the refcnt not goes to zero 
if the return value or name of return value is:
	1) the string of "data type" in C/C++, like "int", "float", "string",....
	2) the module/function/... in python
	3) unknown object?!
and I don't know will it cause memory leak if the refcnt after "Py_Finalize()" function...	

<about the annoying reference count mechanism in python:>
pseudo code: (-> means "point to", {.} means obj ifself)
    PyObject *pName, *pModule, *pDict, *pFunc;
    PyObject *pArgs, *pValue;
   
    pName = PyString_FromString("pos_tag"); // refcnt +1 ( pName->{name_obj} )
    pModule = PyImport_Import(pName); // refcnt +2 ( pModule->{module_obj}, and pModule->pName->{name_obj} )
    Py_DECREF(pName); // refcnt -1
    pFunc = PyObject_GetAttrString(pModule, "loadPickle"); // refcnt +2 ( pFunc->{func_obj}, and pFunc->pModule->{module_obj} )
    pValue = PyObject_CallObject(pFunc, NULL); // refcnt +1 ( only pValue->{Value_obj}, input vars are not involved since the output just borrow the input reference )


----------
602.3.0106
----------
<VC++/windows embedding python script "pure/separate" problem:>
1) just like in linux system, "PySys_SetArgv(argc, argv)" must be added
    Py_SetProgramName(argv[0]);
    Py_Initialize();
    PySys_SetArgv(argc, argv); <-----------------------
//    pName = PyString_FromString(argv[1]);
    pName = PyString_FromString("_postag");
    

PyObject* PyInt_FromLong(long ival)
Return value: New reference.
Create a new integer object with a value of ival.


----------
602.2.0105
----------
<VC++/windows embedding python script problem:>
1) don't forget to include python27.lib
2) 	
  Py_SetProgramName(argv[0]);  /* optional but recommended */
	Py_Initialize();
//	FILE* file = fopen("_pos_tagging.py", "r");
//	PyRun_SimpleFile(file, "_pos_tagging.py");
// instead of above 2 lines, replace by following 2 lines
	PyObject* pyFileObj = PyFile_FromString("D:/Python27/_py/_pos_tagging.py", "r");
	PyRun_SimpleFile(PyFile_AsFile(pyFileObj), "D:/Python27/_py/_pos_tagging.py", 1);

	Py_Finalize();
	return 0;	  

<VC++/windows embedding python script "pure" problem>
1) copy python27.lib and rename to "python27_d.lib"
2) import this new "python27_d.lib" to project
3) revise "pyconfig.h"ï¼Œcomment "#define Py_DEBUG"
#remark: notice that this trick also solves above problem


----------
602.1.0104
----------
<C++ embedding python script problem:>

add MS_NO_COREDLL definition at Configuration Properties->C/C++->Preprocessor->Preprocessor Definitions; or add #define MS_NO_COREDLL line before including python.h.

#define MS_NO_COREDLL
#include <Python.h>

==========
543.4.1022
----------
<OpenCV dependency for VC:>
Properties > Linker > Input >

opencv_calib3d2411d.lib
opencv_contrib2411d.lib
opencv_core2411d.lib
opencv_features2d2411d.lib
opencv_flann2411d.lib
opencv_gpu2411d.lib
opencv_highgui2411d.lib
opencv_imgproc2411d.lib
opencv_legacy2411d.lib
opencv_ml2411d.lib
opencv_nonfree2411d.lib
opencv_objdetect2411d.lib
opencv_ocl2411d.lib
opencv_photo2411d.lib
opencv_stitching2411d.lib
opencv_superres2411d.lib
opencv_ts2411d.lib
opencv_video2411d.lib
opencv_videostab2411d.lib

// for released ver.
opencv_calib3d2411.lib
opencv_contrib2411.lib
opencv_core2411.lib
opencv_features2d2411.lib
opencv_flann2411.lib
opencv_gpu2411.lib
opencv_highgui2411.lib
opencv_imgproc2411.lib
opencv_legacy2411.lib
opencv_ml2411.lib
opencv_nonfree2411.lib
opencv_objdetect2411.lib
opencv_ocl2411.lib
opencv_photo2411.lib
opencv_stitching2411.lib
opencv_superres2411.lib
opencv_ts2411.lib
opencv_video2411.lib
opencv_videostab2411.lib

<OpenCV haar classifier>
D:/opencv/build/share/OpenCV/haarcascades
