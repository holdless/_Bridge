----------
604.3.0120
----------
<How to compile on RPi? both c and java>
courtesy of: 
http://jpsix.pixnet.net/blog/post/23224469-%E4%BD%BF%E7%94%A8jni%E8%AE%93c%2B%2B%E5%8F%AF%E4%BB%A5%E5%91%BC%E5%8F%ABjava%E7%A8%8B%E5%BC%8F---embed-java-in-c-

1) compile HelloWorld.java
javac HelloWorld.java

2) compile test.cpp
g++ -I/include -I/include/linux -L/jre/lib/i386/client -ljvm test.cpp -o test
注意.要include jre/lib/i386/client, g++才能對-ljvm 做出判斷
在我的環境之下 example
g++ -I/usr/java/jdk1.6.0_10/include -I/usr/java/jdk1.6.0_10/include/linux -L/usr/java/jdk1.6.0_10/jre/lib/i386/client -ljvm test.cpp -o test

3) run program
要把/jre/lib/i386/client 加入LD_LIBRARY_PATH
export export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/jre/lib/i386/client
or
修改/etc/bashrc (need root authority)
同樣加入
export export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/jre/lib/i386/client
for example
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/java/jdk1.6.0_10/jre/lib/i386/client

./test
========同場加映 Performance Evaluation======================
我將embed Java 和 system function call 做比較

以下是test2.cpp

#include < stdio.h >
#include < stdlib.h >
int main()
{
    system("java HelloWorld");
    return 0;
}

用system call時間差了4.11倍...

<c call Java coding details:>
1) FindClass: env->FindClass("stanford/pos/tagger/StanfordPosTagger")
must include all "package name", and use"/" instead of "."
2) JNI signature of a method:
Type     Chararacter 
boolean      Z 
byte         B 
char         C 
double       D 
float        F 
int          I 
long         J 
object       L 
short        S 
void         V 
array        [ 

ex:
long myMethod (int n, String s, int[] arr);
>> (ILJAVA/LANG/STRING;[I)J

notice that signature of OBJECT should end with ";"

links:
http://www.rgagnon.com/javadetails/java-0286.html
http://blog.csdn.net/jintiaozhuang/article/details/9016889

3) C++'s .exe file must be put into JRE folder (Setup path in VC folder) 
--> not necessary (605.4.0128)! just setup EXPORT path to libjvm.so
--> export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/jvm/jdk-8-oracle-arm-vfp-hflt/jre/lib/arm/client
4) you must update .jar file by "clean and rebuild"!
5) external data files (copy from other place) in "dist" will be swept after "clean and rebuild"
6) c-call-java crashes in java code "new MaxentTagger" line >> using absolute-path is ok! (cannot find other solution) << true
7) c-string is different from Java "jstring" (since jstring is an object in Java):
>> ex (c++ code, from c-string to jstring):

jstring str2jstring(JNIEnv* env,const char* pat)
{
    jclass strClass = (env)->FindClass("Ljava/lang/String;");
    jmethodID ctorID = (env)->GetMethodID(strClass, "<init>", "([BLjava/lang/String;)V");
    jbyteArray bytes = (env)->NewByteArray(strlen(pat));
    (env)->SetByteArrayRegion(bytes, 0, strlen(pat), (jbyte*)pat);
    jstring encoding = (env)->NewStringUTF("GB2312"); 
    return (jstring)(env)->NewObject(strClass, ctorID, bytes, encoding);
}

<c++/java/netbeans setting:>
1) How Netbeans selects 32 or 64 SDK >> Application right click > Properties > Libraries > select SDK...
however, this won't affect anything...
2) Java "static" notation: basically, it's equivalent to Obj-C's "class method"
3) C++ using "string" must:
#include <string>
#include <iostream>
using namespace std;
4) Java String <--> Java char[] transformation: 
>> String to char[]
String str = "Abcdefg";
char[] cArray = str.toCharArray();

>> char[] to String
char[] charArray = new char[] {'a', 'b', 'c'};
String str = new String(charArray);

----------
604.1.0118
----------
<c call java setting problem:>
1. on project righ-click > properties > configuration properties > vc directories > set all include/lib dependencies for Java
2. Java SE version depends on the Visual Studio version (32 or 64), not the operation system version. wrong version causes "unsolved external..."
3. remember to add "jvm.lib"

----------
603.4.0114
----------
<Getting Started with Java® SE Embedded on the Raspberry Pi:>
http://www.oracle.com/technetwork/articles/java/raspberrypi-1704896.html

<command-line run NetBeans' builded file:>
use ".jar"
1) "dist" folder contains all you need.
2) some special case, you need to copy related files (which you call in the program) into the "dist" folder.
3) ex:
java -jar "Stanford_Pos_Tagger.jar" 
(remember to copy the models)

----------
603.3.0113
----------
<Embed Java into a C++ application?>
http://stackoverflow.com/questions/7506329/embed-java-into-a-c-application

<Tagging text with Stanford POS Tagger in Java Applications>
http://new.galalaly.me//2011/05/tagging-text-with-stanford-pos-tagger-in-java-applications/

<RPi Java (葉難)>
http://yehnan.blogspot.tw/2015/05/raspberry-pijava-8hello-world.html

